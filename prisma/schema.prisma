generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USER_LEVEL {
  ADMIN
  MEMBER
}

model user {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  email           String          @unique
  password        String
  phone           String?
  avatar          String?
  avatar_media_id String?
  user_level      USER_LEVEL      @default(MEMBER)
  created_at      DateTime        @default(now())
  updated_at      DateTime        @default(now()) @updatedAt
  product         product[]
  stock_history   stock_history[]
  order           order[]

  @@index([id, email])
}

model forgot_password {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String    @unique
  token      String?
  expired_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
}

model product {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_name     String
  slug             String
  description      String
  price            Int       @default(0)
  product_image    String?
  product_image_id String?
  created_by_id    String    @db.Uuid
  is_active        Boolean   @default(false)
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now()) @updatedAt
  deleted_at       DateTime?

  created_by user         @relation(fields: [created_by_id], references: [id])
  stock      stock[]
  order_item order_item[]

  @@index([id, created_by_id, slug, is_active])
}

model stock {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id String   @db.Uuid
  stock      Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  product product @relation(fields: [product_id], references: [id])

  @@index([id, product_id])
}

enum STOCK_HISTORY_TYPE {
  INPUT
  OUT_SALES
  REJECT
}

model stock_history {
  id            String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stock_id      String             @db.Uuid
  history_type  STOCK_HISTORY_TYPE @default(OUT_SALES)
  notes         String
  amount        Int                @default(0)
  external_id   String?
  created_at    DateTime           @default(now())
  updated_at    DateTime           @default(now()) @updatedAt
  created_by_id String             @db.Uuid
  created_by    user               @relation(fields: [created_by_id], references: [id])

  @@index([id, stock_id, external_id])
}

enum ORDER_STATUS {
  PENDING
  ON_PROCESS
  FAILED
  CANCEL
  DONE
}

model order {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String       @db.Uuid
  order_no     String       @unique
  amount       Int          @default(0)
  notes        String
  order_status ORDER_STATUS @default(PENDING)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now()) @updatedAt
  user         user         @relation(fields: [user_id], references: [id])
  order_item   order_item[]
  shipping     shipping[]
  payment      payment[]

  @@index([id, user_id, order_no])
}

model order_item {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id      String   @db.Uuid
  product_id    String   @db.Uuid
  amount        Int      @default(0)
  product_price Int      @default(0)
  qty           Int      @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  order   order   @relation(fields: [order_id], references: [id])
  product product @relation(fields: [product_id], references: [id])

  @@index([id, order_id, product_id])
}

enum SHIPPING_STATUS {
  PENDING
  DONE
  FAILED
}

model shipping {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id        String          @db.Uuid
  receive_address String?
  receive_email   String?
  receive_name    String?
  receive_phone   String?
  shipping_status SHIPPING_STATUS @default(PENDING)
  created_at      DateTime        @default(now())
  updated_at      DateTime        @default(now()) @updatedAt
  order           order           @relation(fields: [order_id], references: [id])

  @@index([id, order_id])
}

enum PAYMENT_STATUS {
  UNPAID
  FAILED
  CANCEL
  PAID
}

enum PAYMENT_METHOD {
  BANK_TRANSFER
  CASH
  EWALLET
}

model payment {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id         String         @db.Uuid
  amount           Int            @default(0)
  payment_status   PAYMENT_STATUS @default(UNPAID)
  payment_method   PAYMENT_METHOD @default(BANK_TRANSFER)
  notes            String?
  payment_image    String?
  payment_image_id String?
  created_at       DateTime       @default(now())
  updated_at       DateTime       @default(now()) @updatedAt
  order            order          @relation(fields: [order_id], references: [id])

  @@index([id, order_id, payment_status])
}
