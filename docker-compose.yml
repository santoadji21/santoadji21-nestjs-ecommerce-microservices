services:
  user:
    build:
      context: .
      dockerfile: ./apps/user/Dockerfile
      target: development
    container_name: alkahfistore-user
    command: "sh -c 'pnpm prisma generate; pnpm start:dev user'"
    env_file:
      - ./apps/user/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - postgres
    networks:
      - alkahfistore-network

  # orders:
  #   build:
  #     context: .
  #     dockerfile: ./apps/orders/Dockerfile
  #     target: development
  #   container_name: alkahfistore-orders
  #   command: "sh -c 'pnpm prisma generate; pnpm start:dev orders'"
  #   env_file:
  #     - ./apps/orders/.env
  #   volumes:
  #     - .:/usr/src/app
  #   depends_on:
  #     - postgres
  #   networks:
  #     - alkahfistore-network

  medias:
    build:
      context: .
      dockerfile: ./apps/medias/Dockerfile
      target: development
    container_name: alkahfistore-medias
    command: "pnpm start:dev medias"
    env_file:
      - ./apps/medias/.env
    volumes:
      - .:/usr/src/app
    depends_on:
      - minio
      - mongo
    networks:
      - alkahfistore-network

  # payments:
  #   build:
  #     context: .
  #     dockerfile: ./apps/payments/Dockerfile
  #     target: development
  #   container_name: alkahfistore-payments
  #   command: "sh -c 'pnpm prisma generate; pnpm start:dev payments'"
  #   env_file:
  #     - ./apps/payments/.env
  #   volumes:
  #     - .:/usr/src/app
  #   depends_on:
  #     - postgres
  #   networks:
  #     - alkahfistore-network

  notifications:
    build:
      context: .
      dockerfile: ./apps/notifications/Dockerfile
      target: development
    container_name: alkahfistore-notifications
    command: "sh -c 'pnpm prisma generate; pnpm start:dev notifications'"
    env_file:
      - ./apps/notifications/.env
    volumes:
      - .:/usr/src/app
    depends_on:
      - nats
    networks:
      - alkahfistore-network

  products:
    build:
      context: .
      dockerfile: ./apps/products/Dockerfile
      target: development
    container_name: alkahfistore-products
    command: "sh -c 'pnpm prisma generate; pnpm start:dev products'"
    env_file:
      - ./apps/products/.env
    volumes:
      - .:/usr/src/app
    depends_on:
      - user
      - postgres
    networks:
      - alkahfistore-network

  # shipping:
  #   build:
  #     context: .
  #     dockerfile: ./apps/shipping/Dockerfile
  #     target: development
  #   container_name: alkahfistore-shipping
  #   command: "sh -c 'pnpm prisma generate; pnpm start:dev shipping'"
  #   env_file:
  #     - ./apps/shipping/.env
  #   volumes:
  #     - .:/usr/src/app
  #   depends_on:
  #     - postgres
  #   networks:
  #     - alkahfistore-network

  # Traefik
  traefik:
    image: traefik:v2.9
    container_name: traefik
    ports:
      - '80:80'
      - '8081:8080'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/dynamic:/etc/traefik/dynamic
    networks:
      - alkahfistore-network
    depends_on:
      - user
      # - orders
      - medias
      # - payments
      # - notifications
      - products
      # - shipping
      - postgres
      # - mongo
    restart: always

  # Postgres DB
  postgres:
    image: postgres:15
    container_name: postgres_alkahfistore_
    environment:
      POSTGRES_DB: alkahfistore_db
      POSTGRES_USER: alkahfistore_user
      POSTGRES_PASSWORD: alkahfistore_pass
    ports:
      - '5432:5432'
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - alkahfistore-network

  # MongoDB
  mongo:
    image: mongo
    container_name: mongo
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=alkahfistore
    volumes:
      - mongo-data:/data/db
    networks:
      - alkahfistore-network

  #NATS
  nats:
    image: nats:latest
    container_name: nats
    command: '--cluster_name NATS --cluster nats://0.0.0.0:6222 --http_port 8222'
    ports:
      - '4222:4222'
      - '6222:6222'
      - '8222:8222'
    networks:
      - alkahfistore-network
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.services.nats.loadbalancer.server.port=8222'
      - 'traefik.http.routers.nats.rule=Host(`nats.localhost`)'
      - 'traefik.http.routers.nats.service=nats'
      - 'traefik.http.routers.nats.entrypoints=nats'

  #Redis
  # redis:
  #   image: redis:latest
  #   container_name: redis_container
  #   ports:
  #     - '6379:6379'
  #   volumes:
  #     - redis_data:/data
  #   environment:
  #     - REDIS_PASSWORD=alkahfistore
  #   command: ['redis-server', '--requirepass', '$$REDIS_PASSWORD']
  #   restart: always
  #   healthcheck:
  #     test: ['CMD', 'redis-cli', 'ping']
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  #Minio
  minio:
    image: minio/minio
    container_name: minio
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: "minioadmin"
      MINIO_ROOT_PASSWORD: "minioadmin"
      MINIO_DEFAULT_BUCKETS: "ecommerce"
    command: server /data --console-address ":9001"
    networks:
      - alkahfistore-network

networks:
  alkahfistore-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local
  pg-data:
    driver: local
  redis_data:
    driver: local
  minio-data:
    driver: local
