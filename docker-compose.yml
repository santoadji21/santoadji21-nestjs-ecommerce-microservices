services:
  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    container_name: alkahfistore-auth
    command: pnpm run start:dev auth
    env_file:
      - ./apps/auth/.env
    volumes:
      - .:/usr/src/app
    depends_on:
      - mongo
    networks:
      - alkahfistore-network

  orders:
    build:
      context: .
      dockerfile: ./apps/orders/Dockerfile
      target: development
    container_name: alkahfistore-orders
    command: pnpm run start:dev orders
    env_file:
      - ./apps/orders/.env
    volumes:
      - .:/usr/src/app
    depends_on:
      - postgres
    networks:
      - alkahfistore-network

  medias:
    build:
      context: .
      dockerfile: ./apps/medias/Dockerfile
      target: development
    container_name: alkahfistore-medias
    command: pnpm run start:dev medias
    env_file:
      - ./apps/medias/.env
    volumes:
      - .:/usr/src/app
    depends_on:
      - minio
    networks:
      - alkahfistore-network

  payments:
    build:
      context: .
      dockerfile: ./apps/payments/Dockerfile
      target: development
    container_name: alkahfistore-payments
    command: pnpm run start:dev payments
    env_file:
      - ./apps/payments/.env
    volumes:
      - .:/usr/src/app
    depends_on:
      - postgres
    networks:
      - alkahfistore-network

  notifications:
    build:
      context: .
      dockerfile: ./apps/notifications/Dockerfile
      target: development
    container_name: alkahfistore-notifications
    command: pnpm run start:dev notifications
    env_file:
      - ./apps/notifications/.env
    volumes:
      - .:/usr/src/app
    depends_on:
      - mongo
    networks:
      - alkahfistore-network

  products:
    build:
      context: .
      dockerfile: ./apps/products/Dockerfile
      target: development
    container_name: alkahfistore-products
    command: pnpm run start:dev products
    env_file:
      - ./apps/products/.env
    volumes:
      - .:/usr/src/app
    depends_on:
      - postgres
    networks:
      - alkahfistore-network

  shipping:
    build:
      context: .
      dockerfile: ./apps/shipping/Dockerfile
      target: development
    container_name: alkahfistore-shipping
    command: pnpm run start:dev shipping
    env_file:
      - ./apps/shipping/.env
    volumes:
      - .:/usr/src/app
    depends_on:
      - postgres
    networks:
      - alkahfistore-network

  # Traefik
  traefik:
    image: traefik:v2.9
    container_name: traefik
    ports:
      - '80:80'
      - '8081:8080'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/dynamic:/etc/traefik/dynamic
    networks:
      - alkahfistore-network
    depends_on:
      - auth
      - orders
      - medias
      - payments
      - notifications
      - products
      - shipping
    restart: always

  # Postgres DB
  postgres:
    image: postgres:15
    container_name: postgres_alkahfistore_
    environment:
      POSTGRES_DB: alkahfistore_db
      POSTGRES_USER: alkahfistore_user
      POSTGRES_PASSWORD: alkahfistore_pass
    ports:
      - '5432:5432'
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - alkahfistore-network

  # MongoDB
  mongo:
    image: mongo
    container_name: mongo
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    volumes:
      - mongo-data:/data/db
    networks:
      - alkahfistore-network

  #Redis
  redis:
    image: redis:latest
    container_name: redis_container
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=your_password_here
    command: ['redis-server', '--requirepass', '$$REDIS_PASSWORD']
    restart: always
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5

  #Minio
  minio:
    image: minio/minio
    container_name: minio
    volumes:
      - minio-data:/data
    ports:
      - '9002:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniopassword
    command: server /data --console-address ":9001"
    networks:
      - alkahfistore-network

networks:
  alkahfistore-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local
  pg-data:
    driver: local
  redis_data:
    driver: local
  minio-data:
    driver: local
